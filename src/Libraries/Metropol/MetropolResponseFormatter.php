<?php
/**
 * Created by PhpStorm.
 * User: rndwiga
 * Date: 5/21/18
 * Time: 12:32 PM
 */

namespace Rndwiga\CreditBureau\Libraries\Metropol;

use Rndwiga\Toolbox\Infrastructure\Services\AppJsonManager;
use Rndwiga\Toolbox\Infrastructure\Services\AppLogger;

class MetropolResponseFormatter
{
    public function formatCreditInfo($creditInformation){
        $isValidJson = (new AppJsonManager())->validateJsonData($creditInformation);
        (new AppLogger('ResponseFormatter','report_access'))->logInfo([
            'where'=>'MetropolResponseFormatter->formatCreditInfo',
            'data'=>$creditInformation,
        ]);
        if ($isValidJson['status'] == 'success'){
                $isSuccess = $this->isCallSuccessful($creditInformation);
            if ($isSuccess === true){
                return $creditInformation;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }

    private function isCallSuccessful($creditInformation){
        $response = json_decode($creditInformation);

        if (isset($response->has_error) && $response->has_error == true){
            $errorCode = $response->api_code;
            switch ($errorCode){
                case 'E027':
                    return [
                        'errorCode' => $errorCode,
                        'errorDescription' => $response->api_code_description,
                        'errorDetails' => 'Hash sent in API call doesn\'t match with Hash generated by the server'
                    ];
                    break;
                default:
                    return [
                        'errorCode' => $errorCode,
                        'errorDescription' => $response->api_code_description,
                        'errorDetails' => ''
                    ];
            }
        }else{
            return true;
        }
    }

    public function reportReason($reasonCode){
       $code = $reasonCode;

       if (isset($code) && is_int($code)){
           switch ($code){
               case 1:
                   return [
                     'type' => 'New credit application'
                   ];
                   break;
               case 2:
                   return [
                       'type' => 'Review of existing credit'
                   ];
                   break;
               case 3:
                   return [
                       'type' => 'Verify customer details'
                   ];
                   break;
               case 4:
                   return [
                       'type' => 'Direct customer requests'
                   ];
                   break;
           }
       }
       return false;
    }

    public function identityType($identityCode){
        $code = $identityCode;

        if (isset($code)){
            switch ($code){
                case "001":
                    return [
                        'type' => 'National ID'
                    ];
                    break;
                case "002":
                    return [
                        'type' => 'Passport'
                    ];
                    break;
                case "003":
                    return [
                        'type' => 'Service ID'
                    ];
                    break;
                case "004":
                    return [
                        'type' => 'Alien Registration'
                    ];
                    break;
                case "005":
                    return [
                        'type' => 'Company/Business Registration'
                    ];
                    break;
            }
        }
        return false;
    }

    public function delinquencyCodes($delinquencyCode){
        $code = $delinquencyCode;

        if (isset($code)){
            switch ($code){
                case "001":
                    return [
                        'reportName' => 'Identity not found',
                        'reportDescription' => 'ID number has been found in the database',
                    ];
                    break;
                case "002":
                    return [
                        'reportName' => 'No account information',
                        'reportDescription' => 'ID number has been found but it has no credit information'
                    ];
                    break;
                case "003":
                    return [
                        'reportName' => 'No delinquency',
                        'reportDescription' => 'ID Number has credit info with No NPA',
                    ];
                    break;
                case "004":
                    return [
                        'reportName' => 'Currently delinquent True',
                        'reportDescription' => 'ID Number has credit information with at least one current NPA',
                    ];
                    break;
                case "005":
                    return [
                        'reportName' => 'Historical delinquency True',
                        'reportDescription' => 'ID Number has credit information with at least one Historical NPA',
                    ];
                    break;
            }
        }
        return false;
    }
}
